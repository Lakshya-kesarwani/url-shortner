#EXPRESS FRAMEWORK
app.METHOD(PATH,HANDLER)

app-> is instanceof express
METHOD-> http req METHOD
PATH-> is path on http server
HANDLER-> is the function executed when the route is matched

----------------------------------------------------------------
#REST API
(RESTFUL API)
Rules for best practices:-

two components-> server(sends response) + client(send request) [browser,mobile,alexa]

1.server client architecture  -->JSON (kind of raw data)->client can render in its own way ->res.JSON FOR CSR
                            frontend can decide how to work with data:
                            but if we are sure  client is browser, we can go with server side rendering
2. Always respect all HTTP METHODs
    GET ->user data reading and return
    POST -> handle new user creation
    PUT ->
    PATCH ->update user 
    DELETE ->delete user
----------------------------------------------------------------

GET /users - list all users   
GET /users/1 - get user with id 1
GET /users/2 - get user with id 2

POST /users - create new user

PATCH /users/1 - update user with id 1

DELETE /users/2 - delete user with id 2

----------------------------------------------------------------
Middlewares

client->sends req -> lets get req on "/users"
        expreess check for route-> sends response

but with middleware-> req first goes to middleware
             (can do some kind of processing)-> 
             either forwards the request; 
             or returns the response 

can change 
 ----------------------------------------------------------------

 headers
 HTTP headers are an important part of the api request and response as they represent the
 metadata associated with the api request and response

 header carry information for the request and response body

--------------------------------------------------------------------------------------------------------------------------------

status code

200 - ok successfull

Informational responses (100 – 199)
Successful responses (200 – 299)
Redirection messages (300 – 399)
Client error responses (400 – 499)
Server error responses (500 – 599)


400-> bad request ->malfunctioned request (syntax)
401->unauthorized 
403->forbidden
404->Not found


500 - internal server error
503 - service unavailable

----------------------------------------------------------------

SCHEMA -DEFINE THE STRUCTURE
    SCHEMA -MODEL

    User.create({
        first_name: body.first_name,
        last_name: body.last_name,
        email: body.email,
        job_title: body.job_title,
        gender: body.gender
    })

    await User.find({});
    User.findById
    User.findByIdAndUpdate(req.params.id, {last_name:"Changed"})
    User.findByIdAndDelete(req.params.id)


    ----------------------------------------------------------------
MVC:
    models
    views
    controllers
    ------- --------------------------------------------------------


    index.js -> main file

                1)require express
                2)require connection 
                    and call it
                3)require router;
                    app.use("path",router)
                4)require middleware
                    app.use(middlware(args))
                additionals (eg middlewares)
                5)app.listen(port,callback)

    models/user.js
                1)require moongoose
                2)define const userSchema =new mongoose.Schema( {
                    col1:{
                        properties(type,required,unique)
                    },
                })
                3)const User = mongoose.model("tablename",userSchema);
                4)module.exports = User

    connection.js->
                1)require mongoose
                2)function that return mongoose.connect(url)
                3)module.exports = {function}

    ./middleware/index.js
                1)requires fs
                2)function that returns (rea,res,next)=>{----}
                3)module.exports = {function}

    ./routes/user.js
                1)require express
                2) const router = express.Router()
                3)require {all controllers}
                4)router.route("path").method(controller[i])
                5)module.exports = router

    ./controller/user.js
                1)require userSchema
                2) async function handleEvent(req,res){
                    ---------------------------
                    return res.status(200).json({msg:"---"})
                }.....
                3)module.exports = {func1,func2,func3,func4,func5,func6}
